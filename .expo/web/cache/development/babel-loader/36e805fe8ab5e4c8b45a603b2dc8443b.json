{"ast":null,"code":"import { countryCodes } from \"../constants/countryCodes\";\nexport var countriesRemover = function countriesRemover(excludedCountries) {\n  return countryCodes == null ? void 0 : countryCodes.filter(function (country) {\n    return !(excludedCountries != null && excludedCountries.find(function (short) {\n      return (country == null ? void 0 : country.code) === (short == null ? void 0 : short.toUpperCase());\n    }));\n  });\n};","map":{"version":3,"names":["countryCodes","countriesRemover","excludedCountries","filter","country","find","short","code","toUpperCase"],"sources":["C:/ORGAPLANTS/Scripts/orgaplants/node_modules/react-native-country-codes-picker/helpers/countriesRemover.ts"],"sourcesContent":["import {countryCodes} from \"../constants/countryCodes\";\r\nimport {CountryItem} from \"../types/Types\";\r\n\r\nexport const countriesRemover = (excludedCountries: string[]|undefined): CountryItem[] => {\r\n    return countryCodes?.filter(country => {\r\n        return !(excludedCountries?.find(short => country?.code === short?.toUpperCase()));\r\n    });\r\n};\r\n"],"mappings":"AAAA,SAAQA,YAAY;AAGpB,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIC,iBAAqC,EAAoB;EACtF,OAAOF,YAAY,oBAAZA,YAAY,CAAEG,MAAM,CAAC,UAAAC,OAAO,EAAI;IACnC,OAAO,EAAEF,iBAAiB,YAAjBA,iBAAiB,CAAEG,IAAI,CAAC,UAAAC,KAAK;MAAA,OAAI,CAAAF,OAAO,oBAAPA,OAAO,CAAEG,IAAI,OAAKD,KAAK,oBAALA,KAAK,CAAEE,WAAW,EAAE;IAAA,EAAC,CAAC;EACtF,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module"}